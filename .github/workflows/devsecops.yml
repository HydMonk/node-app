name: DevSecOps Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  actions: read
  contents: read
  security-events: write  # ✅ Enables SARIF upload


jobs:
  semgrep:
    name: Static Code Analysis (Semgrep)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Semgrep
        run: pip install semgrep

      - name: Run Semgrep (free, local scan)
        run: |
          semgrep --config=auto --json --output=semgrep.json || true

      - name: Upload Semgrep report
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-report
          path: semgrep.json

      #- name: Upload Semgrep findings as artifact
        #uses: actions/upload-artifact@v4
        #with:
         # name: semgrep-findings
         # path: semgrep-results.json

      #- name: Upload SARIF to GitHub Code Scanning
        #uses: github/codeql-action/upload-sarif@v3
        #with:
          #sarif_file: semgrep.sarif

      #- name: Fail if high severity Semgrep findings
       # run: |
        #  if grep -q '"severity": "ERROR"' semgrep-results.json; then
         #   echo "❌ Semgrep found high severity issues"
          #  cat semgrep-results.json
           # exit 1
          #else
           # echo "✅ No high severity Semgrep findings"
          #fi

  snyk:
    name: Dependency Vulnerability Scan (Snyk)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: snyk test --json > snyk.json
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Upload Semgrep report
        uses: actions/upload-artifact@v4
        with:
          name: Snyk-report
          path: snyk.json

  secrets:
      name: Secret Scanning with TruffleHog
      runs-on: ubuntu-latest
      steps:
        - name: Checkout code
          uses: actions/checkout@v4
          with:
            fetch-depth: 0  # This ensures full commit history is available

        - name: TruffleHog OSS 
          id: trufflehog 
          uses: trufflesecurity/trufflehog@main
          continue-on-error: true 
          with: 
            base: ""
            head: ${{ github.ref_name }}
            extra_args: --debug --only-verified

  GitLeaks:
      name: Run GitLeaks
      runs-on: ubuntu-latest
      steps:
        - name: Checkout code
          uses: actions/checkout@v4
          with:
            fetch-depth: 0  # IMPORTANT: full history for Gitleaks
        - name: GitLeaks 
          uses: zricethezav/gitleaks-action@v2
          with:
            #config-path: .gitleaks.toml # Optional custom config
            args: --verbose --report-format json --report-path gitleaks-report.json
        - name: Upload Gitleaks Report
          uses: actions/upload-artifact@v4
          with:
            name: gitleaks-report
            path: gitleaks-report.json

  sonarcloud:
    name: SonarCloud Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Important for Sonar to get full Git history

      - name: Set up JDK 17 (or 11)
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar

      - name: Run SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}


